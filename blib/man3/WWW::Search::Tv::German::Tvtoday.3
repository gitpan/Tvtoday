.\" Automatically generated by Pod::Man version 1.15
.\" Sun Jan 12 16:49:04 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Tvtoday 3"
.TH Tvtoday 3 "perl v5.6.1" "2003-01-12" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1WWW:\s0:Search::Tv::German::Tvtoday \- checking a directory for bad letters in filenames
.SH "PLATFORMS"
.IX Header "PLATFORMS"
Tested with
.Ip "\(bu" 4
Win32
.Ip "\(bu" 4
Linux
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&        #!/usr/bin/perl
\&        use strict;
\&        use WWW::Search::Tv::German::Tvtoday 1.02;
.Ve
.Vb 8
\&        my $tv = WWW::Search::Tv::German::Tvtoday->new(
\&                today=>1,
\&                tomorrow=>1,
\&                proxy => 'http://gatekeeper.rosi13.de:3128');
\&        $tv->searchfor("Maus");
\&        $tv->searchfor("Sendung mit");
\&        $tv->searchfor("Tagesschau","news");
\&        $tv->dontcareforstation('ORF','VIVA');
.Ve
.Vb 8
\&        printf "Get results for %s\en", join(" * ",$tv->get_searchvalues());
\&        print "This takes a while to get, please wait...\en";
\&        my @found = $tv->search();
\&        foreach my $f ($tv->get_resultset()) {
\&                printf "*** what : %s\en",$f->{what};
\&                printf "    where: %s\en",$f->{where};
\&                printf "    when : %s\en",$f->{when};
\&        }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Get television-program from german www.tvtoday.de and search for special 
broadcasts. The result could be input for a notice-mail or a webpage.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\fInew()\fP"
.IX Subsection "new()"
Create object for fetching the information from tvtoday.de. Needed to work 
with this module. 
.PP
Alle Parameters are optional: 
.PP
today =>1|0	Get tv-programm from today (default is 1)
tomorrow =>1|0	Get tv-programm from today (default is 1)
proxy, proxy_user, proxy_pass	If you can access the internet only through a WWW-proxyserver.
.PP
Return value:
The object in which the program lives.
.Sh "searchfor($keyword)"
.IX Subsection "searchfor($keyword)"
The words to search for. You can use simple words, phrases with spaces in it.
Also umlauts are allowed. Can be called multiple times.
.PP
.Vb 5
\&        $tv->searchfor("pink");
\&        $tv->searchfor("panther");
\&        $tv->searchfor("alf");
\&        $tv->searchfor("the quest");
\&        $tv->searchfor("the quest","adventures of");
.Ve
.Sh "dontcareforstation"
.IX Subsection "dontcareforstation"
Maybe you cannot get or don't like stations which are in the result of
the query. You can filter them out from the resultset with this command.
.PP
.Vb 2
\&        $tv->dontcareforstation("VIVA");
\&        $tv->dontcareforstation("ARD","SAT1");
.Ve
.Sh "search"
.IX Subsection "search"
Here begins the work for the programm. For every search-keyword a request 
is sent to the webserver and the answer-pages are interpreted. All results
will be unified (you could find the same broadcast with different words,
like \*(L"pink\*(R" and \*(L"panther\*(R").
.PP
.Vb 1
\&        $tv->search();
.Ve
You can access the resultset via \fIget_resultset()\fR
.PP
Return value:
Nothing.
.Sh "get_resultset"
.IX Subsection "get_resultset"
Get back the result after calling \*(L"search\*(R". You get back a list
of hashes where every element contains the hashkeys \*(L"what\*(R", \*(L"where\*(R"
and \*(L"when\*(R". The list is sorted by date/time.
.PP
.Vb 6
\&        my @found = $tv->search();
\&        foreach my $f ($tv->get_resultset()) {
\&                printf "*** what : %s\en",$f->{what};
\&                printf "    where: %s\en",$f->{where};
\&                printf "    when : %s\en",$f->{when};
\&        }
.Ve
.Sh "get_searchvalues"
.IX Subsection "get_searchvalues"
Get a list of values which are searched for at tvtoday.
.PP
.Vb 1
\&        my @searchingfor = $tv->get_searchvalues();
.Ve
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard Lippmann <horshack@lisa.franken.de>
.SH "HISTORY"
.IX Header "HISTORY"
V1.02 \- Initial release
